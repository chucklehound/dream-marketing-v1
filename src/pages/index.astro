---
import Layout from "../layouts/Layout.astro";

import { Image } from 'astro:assets';

import Button from "../components/Button.astro";
import Navigation from "../components/Navigation.astro";
import Footer from "../components/Footer.astro";

import chats1 from '/src/img/home-chats.png';
import chats2 from '/src/img/home-chats-2.png';
import chats3 from '/src/img/home-chats-3.png';

import card1 from '/src/img/carousel-1--phone.png';
import card2 from '/src/img/carousel-2--whatsapp.png';
import card3 from '/src/img/carousel-3--update.png';
import card4 from '/src/img/carousel-4--success.png';

import quoteLogo from '/src/img/givewheel-logo.png';
import quoteLogojdi from '/src/img/justdoughit-logo.png';
import quoteLogohol from '/src/img/holibob-logo.png';

import ctaDreamies from '/src/img/end-cta-guys.png';

import DreamieCarousel from '../components/DreamieCarousel.jsx';

import HireGuyBlock from "../components/HireGuyBlock.astro";

import Modal from "../components/Modal.astro";

// Import dreamie1 to dreamie25 as an array
import dreamie1 from '/src/img/hero-dreamies/dreamie-1.png';
import dreamie2 from '/src/img/hero-dreamies/dreamie-2.png';
import dreamie3 from '/src/img/hero-dreamies/dreamie-3.png';
import dreamie4 from '/src/img/hero-dreamies/dreamie-4.png';
import dreamie5 from '/src/img/hero-dreamies/dreamie-5.png';
import dreamie6 from '/src/img/hero-dreamies/dreamie-6.png';
import dreamie7 from '/src/img/hero-dreamies/dreamie-7.png';
import dreamie8 from '/src/img/hero-dreamies/dreamie-8.png';
import dreamie9 from '/src/img/hero-dreamies/dreamie-9.png';
import dreamie10 from '/src/img/hero-dreamies/dreamie-10.png';
import dreamie11 from '/src/img/hero-dreamies/dreamie-11.png';
import dreamie12 from '/src/img/hero-dreamies/dreamie-12.png';
import dreamie13 from '/src/img/hero-dreamies/dreamie-13.png';
import dreamie14 from '/src/img/hero-dreamies/dreamie-14.png';
import dreamie15 from '/src/img/hero-dreamies/dreamie-15.png';
import dreamie16 from '/src/img/hero-dreamies/dreamie-16.png';
import dreamie17 from '/src/img/hero-dreamies/dreamie-17.png';
import dreamie18 from '/src/img/hero-dreamies/dreamie-18.png';
import dreamie19 from '/src/img/hero-dreamies/dreamie-19.png';
import dreamie20 from '/src/img/hero-dreamies/dreamie-20.png';
import dreamie21 from '/src/img/hero-dreamies/dreamie-21.png';
import dreamie22 from '/src/img/hero-dreamies/dreamie-22.png';
import dreamie23 from '/src/img/hero-dreamies/dreamie-23.png';
import dreamie24 from '/src/img/hero-dreamies/dreamie-24.png';
import dreamie25 from '/src/img/hero-dreamies/dreamie-25.png';

const dreamieImages = [
  dreamie1, dreamie2, dreamie3, dreamie4, dreamie5,
  dreamie6, dreamie7, dreamie8, dreamie9, dreamie10,
  dreamie11, dreamie12, dreamie13, dreamie14, dreamie15,
  dreamie16, dreamie17, dreamie18, dreamie19, dreamie20,
  dreamie21, dreamie22, dreamie23, dreamie24, dreamie25
];

// Just return an array of src strings now
const images = dreamieImages.map((img) => img.src);

const messages = [
  // cycle 1
  { name: "Ben",     type: "Marketing Pro",  text: "overseeing the build of the company website" },   // start a business
  { name: "Tina",    type: "Sales Pro",      text: "researching and building target company lists" }, // enter new markets
  { name: "Ethan",   type: "Personal Pro",   text: "managing incoming phone calls" },                 // save an hour
  { name: "Sophia",  type: "Sales Pro",      text: "sending contracts out for signature" },           // handle more customers
  { name: "Anna",    type: "Finance Pro",    text: "chasing up missing receipts and invoices" },      // get paid on time

  // cycle 2
  { name: "Chris",   type: "Marketing Pro",  text: "creating and managing social media content" },
  { name: "Alex",    type: "Sales Pro",      text: "testing and refining outreach campaigns" },
  { name: "Nina",    type: "Personal Pro",   text: "arranging travel for frequent business trips" },
  { name: "Pablo",   type: "Personal Pro",   text: "handling and directing phone enquiries" },
  { name: "Charlie", type: "Finance Pro",    text: "following up on missing financial documents" },

  // cycle 3
  { name: "Leo",     type: "Marketing Pro",  text: "planning and creating social media posts" },
  { name: "Omar",    type: "Marketing Pro",  text: "selecting and preparing company lists for campaigns" },
  { name: "Kara",    type: "Personal Pro",   text: "booking complex travel itineraries" },
  { name: "Sam",     type: "Personal Pro",   text: "following up quickly with every new enquiry" }, 
  { name: "Priya",   type: "Finance Pro",    text: "tracking down outstanding receipts and invoices" },

  // cycle 4
  { name: "Grace",   type: "Marketing Pro",  text: "setting up your first ad campaign" },           
  { name: "Jack",    type: "Sales Pro",      text: "identifying prospects in adjacent markets" },
  { name: "Philipp", type: "Personal Pro",   text: "extracting and organising receipts from emails" },
  { name: "Liam",    type: "Personal Pro",   text: "managing onboarding paperwork for new customers" },
  { name: "Hugo",    type: "Finance Pro",    text: "ensuring all receipts and invoices are accounted for" },

  // cycle 5
  { name: "Jordan",  type: "Personal Pro",   text: "organising your business calendar from day one" },
  { name: "Olivia",  type: "Sales Pro",      text: "opening conversations in new regions" },
  { name: "Isla",    type: "Personal Pro",   text: "organising receipts and uploading them to accounts" },
  { name: "Noah",    type: "Personal Pro",   text: "keeping all customer conversations organised in one place" },
  { name: "Maya",    type: "Finance Pro",    text: "following up on incomplete financial records" }
];
import Carousel from '../components/Carousel.astro';

const contentBlocks = [
  {
    image: card1,
    title: 'No complicated apps to learn, starting is as simple as making a call.',
    subtitle: 'Be the first to hire',
    ctaText: 'Get notified',
  },
  {
    image: card2,
    title: 'Make plans with a message, and leave your Dream team to handle the hard work.',
    subtitle: 'Be the first to hire',
    ctaText: 'Get notified',
  },
  {
    image: card3,
    title: 'Grow your business without growing your workload. Your team handles the hard work, you take the call.',
    subtitle: 'Be the first to hire',
    ctaText: 'Get notified',
  },
  {
    image: card4,
    title: 'Priced to get your business started, built to make it succeed.',
    subtitle: 'Be the first to hire',
    ctaText: 'Get notified',
  },
];
---

<Layout title="Dream - AI that grows your business">
  <Navigation />
  <header class="hero-home index-hero">
    <div class="hero-elements main-content">
      <section class="header-image home-hero">
        <div class="ticker-window">
          <DreamieCarousel images={images} messages={messages} client:load />
        </div>
      </section>
      <section class="header-text">
        <h1 class="page-title">
          Hire a Pro to help you
          <span id="rotating-text">difficult markets</span>
        </h1>
      </section>
      <div class="actions">
        <Button
        target=""
        variant="primary"
        size="large"
        data-open-modal="mailing-list-modal"
        label="">Be the first to hire</Button>
      </div>
    </div>
  </header>
  <main>
    <HireGuyBlock />
    <section class="main-content">
      <article class="content-container full-width">
        <div class="content-title">
          <h2>Work is hard. <br/>So we made <span class="highlight-title">Dream simple</span></h2>
          <p>Dream keeps things simple on the surface, while powerful AI managers handle the hard stuff.</p>
        </div>
        <Carousel items={contentBlocks} />
      </article>
    </section>
    <section class="main-content">
      <article class="full-width-contrast promo-home promo-human">
        <div class="content-container">
          <div class="content-title">
            <h2>Dream is your 24/7 <br/><span class="highlight-title">AI powered</span> workforce</h2>
            <p>The employees that you need to reach your business goals, <br/>working for you every hour of every day.</p>
          </div>
        </div>
      </article>
    </section>
    <section class="main-content contain-on-mobile">
      <article class="content-container">
        <div class="breakout rotating-chats">
          <div class="block" style={`background-image: url(${chats1.src});`}></div>
          <div class="block" style={`background-image: url(${chats2.src});`}></div>
          <div class="block" style={`background-image: url(${chats3.src});`}></div>
        </div>
        <div class="content-title">
          <h2>Built to <span class="highlight-title">handle the things</span> <br/>you don't want to</h2>
          <p>Your AI employees are tailored for your business - they learn what you do, how you speak & how you work. </p>
        </div>
      </article>
    </section>
    <section class="customer-quote main-content"> 
      <article class="quote-body"> 
        <div class="content-title">
          <h2>AI that works <span class="highlight-title">for everyone</span></h2>
        </div>
    
        <!-- Only this viewport/track rotates -->
        <div class="quote-viewport">
          <div class="quote-track" role="group" aria-roledescription="carousel" aria-label="Customer quotes">
    
            <!-- Slide 1 -->
            <div class="quote-slide">
              <blockquote>
                <p>“Dream has been a game-changer for GiveWheel. Their Sales Manager is like a second brain—it finds the right companies, reaches out, follows up, and keeps leads warm. We’re now top of mind for corporate charity campaigns, without stretching our team. It’s taken us from reactive to proactive, without hiring.”</p>
                <cite>
                  <span>Charlie Hart, Co‑founder at Givewheel</span>
                  <Image
                    src={quoteLogo}
                    alt="The logo for Givewheel"
                    width={364}
                    height={96}
                    format="webp"
                  />
                </cite>
              </blockquote>
            </div>
    
            <!-- Slide 2 -->
            <div class="quote-slide">
              <blockquote>
                <p>“Dream has transformed Just Dough It from a side hustle into a full-time business. Their Head of Sales does the outreach I’d never have had time for—emailing venues across the country, keeping the pipeline full, and following up automatically. Every customer we’ve won has come through Dream, and it’s freed me to focus on growing the business instead of chasing leads.”</p>
                <cite><span>Will Cowley, Owner at Just Dough It</span></cite>
                <Image
                  src={quoteLogojdi}
                  alt="The logo for Just Dough It"
                  width={480}
                  height={56}
                  format="webp"
                />
              </blockquote>
            </div>
    
            <!-- Slide 3 -->
            <div class="quote-slide">
              <blockquote>
                <p>“Dream has been a huge growth driver for Holibob. Our Head of Sales runs all our outreach—finding the right partners, reaching out, and booking calls—so we just show up ready to close. It even opened up new sectors like airlines that we’d never had time to target before. It’s like having a dedicated sales team on autopilot, without the overhead.”</p>
                <cite><span>Angus Hardy, Co-founder at Holibob</span></cite>
                <Image
                  src={quoteLogohol}
                  alt="The logo for Holibob"
                  width={408}
                  height={96}
                  format="webp"
                />
              </blockquote>
            </div>
    
          </div>
        </div>
    
        <!-- Dots live INSIDE the box -->
        <div class="quote-dots" aria-label="Slide pagination"></div>
      </article> 
    </section>
    
    
<section class="final-cta"> 
  <article class="main-content cta-container"> 
    <Image
      src={ctaDreamies}
      alt="The 5 Dreamies of Dream - Business, Sales, Marketing, Finance, and Design"
      width={1248}
      height={452}
      format="webp"
    />
    <div class="content-title">
      <h2><span class="highlight-title">Grow your business </span><br/>with Dream</h2>
    </div>
    <Button
        target=""
        variant="primary"
        size="medium"
        data-open-modal="mailing-list-modal"
        label="">Be the first to hire</Button>
          </article> 
    </section>
</main>
    
<Footer />

<Modal id="mailing-list-modal" closeLabel="Close">
  <h2 slot="title">Hire your own employees</h2>
  <p>We're getting our employees ready to onboard, get an instant notification when they're ready to hire.</p>

  <div class="modal-form">
    <!-- Form view -->
    <form id="contactForm" class="webform" novalidate>
      <!-- honeypot -->
      <input type="text" name="address" tabindex="-1" autocomplete="off" hidden />

      <label>
        Name
        <input type="text" name="name" autocomplete="name" required />
      </label>

      <label>
        Email
        <input type="email" name="email" autocomplete="email" required />
      </label>

      <label>
        Company name
        <input type="text" name="company" autocomplete="organization" />
      </label>

      <label>
        Phone number
        <input type="tel" name="phone" autocomplete="tel" inputmode="tel" aria-describedby="phoneHelp" />
      </label>
      <p id="phoneHelp" class="visually-hidden">Include country code if outside the UK.</p>

      <fieldset class="dreamie-radio-group">
        <legend>Which employees are you most excited by? <span class="muted">(pick all that apply)</span></legend>
      
        <div class="radio-option">
          <input type="checkbox" id="personal-assistant" name="dreamie" value="Personal Assistant" />
          <label for="personal-assistant">Personal Assistant</label>
        </div>
        <div class="radio-option">
          <input type="checkbox" id="sales" name="dreamie" value="Head of Sales" />
          <label for="sales">Head of Sales</label>
        </div>
        <div class="radio-option">
          <input type="checkbox" id="finance" name="dreamie" value="Finance Manager" />
          <label for="finance">Finance Manager</label>
        </div>
        <div class="radio-option">
          <input type="checkbox" id="marketing" name="dreamie" value="Head of Marketing" />
          <label for="marketing">Head of Marketing</label>
        </div>
        <div class="radio-option">
          <input type="checkbox" id="cs" name="dreamie" value="Customer Service Manager" />
          <label for="cs">Customer Service Manager</label>
        </div>
        <div class="radio-option">
          <input type="checkbox" id="other" name="dreamie" value="Other" />
          <label for="other">Other</label>
        </div>
      </fieldset>
      

      <button type="submit" class="button secondary" id="submitBtn" aria-live="polite">
        Get updates
      </button>

      <p id="formStatus" class="form-status" role="status" aria-live="polite"></p>
    </form>

    <!-- Success view (hidden until success) -->
    <div id="successView" class="success-view" hidden>
      <h4 id="successHeading">Thanks — you're on the list</h4>
      <p>While you’re here, follow us on LinkedIn</p>
      <ul class="success-links">
        <li><a href="https://www.linkedin.com/company/dream-ai-employees">Dream on LinkedIn</a></li>
      </ul>

      <div class="success-actions">
        <button type="button" class="button" data-close-modal>Close</button>
      </div>
    </div>
  </div>

  <script is:inline>
    (function () {
      // Prevent duplicate bindings if this script is included twice
      if (window.__hsMailingInit) return;
      window.__hsMailingInit = true;
  
      const PORTAL_ID = "49000459";
      const FORM_GUID = "4c792f29-f1da-4d96-9151-126ad0262902";
      const HS_URL = `https://api.hsforms.com/submissions/v3/integration/submit/${PORTAL_ID}/${FORM_GUID}`;
  
      const modal       = document.getElementById('mailing-list-modal');
      const form        = modal?.querySelector('#contactForm');
      const btn         = modal?.querySelector('#submitBtn');
      const statusElm   = modal?.querySelector('#formStatus');
      const successView = modal?.querySelector('#successView');
  
      if (!form) return;
      if (form.dataset.bound === '1') return;
      form.dataset.bound = '1';
  
      const getCookie = (name) =>
        document.cookie.split('; ').find(c => c.startsWith(name + '='))?.split('=')[1];
  
      const setLoading = (loading) => {
        if (!btn) return;
        btn.disabled = loading;
        btn.dataset.originalLabel ??= btn.textContent;
        btn.textContent = loading ? 'Sending…' : btn.dataset.originalLabel;
      };
  
      const splitName = (full) => {
        const s = (full || '').trim().replace(/\s+/g, ' ');
        if (!s) return { first: '', last: '' };
        const parts = s.split(' ');
        if (parts.length === 1) return { first: parts[0], last: '' };
        return { first: parts.slice(0, -1).join(' '), last: parts[parts.length - 1] };
      };
  
      // Map checkbox label/value -> HubSpot CRM option value (from your HS form)
      const OPTION_MAP = {
        'Personal Assistant':        'L6cGUyY3rxjbrVhObJdhj',
        'Head of Sales':             'heWA2aiKPXyI4gZmUDUmF',   // note: I4
        'Head of Marketing':         'oqS6sVZIgJPH0sSj37WLH',
        'Customer Services Manager': 'Ky7KhJjSBxEwocMYR8UOf',
        'Finance Manager':           'zToAvy_nDQn8MCqsJHTtv',
        'Something else':            'gRPuHuaxPur2_WQovppri'
      };
  
      form.addEventListener('submit', async (e) => {
        e.preventDefault();
        if (statusElm) statusElm.textContent = '';
        // honeypot
        if (form.address?.value?.trim()) return;
  
        setLoading(true);
  
        try {
          const fd = new FormData(form);
          const fullName = (fd.get('name')  || '').toString().trim();
          const email    = (fd.get('email') || '').toString().trim();
          const company  = (fd.get('company') || '').toString().trim();
          const phone    = (fd.get('phone')   || '').toString().trim();
  
          // Collect all checked checkboxes named "dreamie" and map to CRM values
          const selected = Array.from(form.querySelectorAll('input[name="dreamie"]:checked'))
            .map(i => OPTION_MAP[i.value])
            .filter(Boolean);
  
          if (selected.length === 0) {
            if (statusElm) statusElm.textContent = 'Please pick at least one employee.';
            setLoading(false);
            return;
          }
  
          // HubSpot expects semicolon-separated internal option values
          const whichEmployeesValue = selected.join(';');
  
          const { first, last } = splitName(fullName);
  
          const fields = [
            { name: 'email', value: email },
            { name: 'firstname', value: first },
            { name: 'lastname',  value: last },
            { name: 'which_employees_', value: whichEmployeesValue },
            { name: 'company', value: company },
            { name: 'phone',   value: phone },
          ].filter(f => f.value !== '');
  
          const context = {
            hutk: getCookie('hubspotutk') || undefined,
            pageUri: window.location.href,
            pageName: document.title
          };
  
          const res = await fetch(HS_URL, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ fields, context })
          });
  
          if (!res.ok) throw new Error('Bad response');
  
          form.hidden = true;
          if (successView) successView.hidden = false;
  
          const heading = successView?.querySelector('#successHeading');
          if (heading) {
            heading.setAttribute('tabindex', '-1');
            heading.focus({ preventScroll: true });
            setTimeout(() => heading.removeAttribute('tabindex'), 100);
          }
          form.reset();
        } catch {
          if (statusElm) statusElm.textContent = 'Something went wrong. Please try again.';
        } finally {
          setLoading(false);
        }
      });
    })();
  </script>
  
  
  

</Modal>



<script>
  (function startSharedTicker(period = 5000) {
    const w = window as any; // cast to any to silence TS about custom props
    if (w.__dreamTickerStarted) return;
    w.__dreamTickerStarted = true;

    // Fire an initial tick so everything aligns immediately
    window.dispatchEvent(new CustomEvent("dream:tick"));

    let expected = Date.now() + period;
    function tick() {
      window.dispatchEvent(new CustomEvent("dream:tick"));
      const drift = Date.now() - expected;
      expected += period;
      setTimeout(tick, Math.max(0, period - drift));
    }
    setTimeout(tick, period);
  })();
</script>


<style>
  #rotating-text {
    transition: opacity 0.4s; /* must match FADE in React */
    opacity: 0;
  }
</style>

<span id="rotating-text" aria-live="polite"></span>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const el = document.getElementById("rotating-text");
    const texts = [
      "start a business",
      "enter new markets",
      "save an hour every day",
      "handle more customers",
      "get paid on time"
    ];
    let i = 0;
    const FADE = 400; // ms

    // Render first item immediately
    el.textContent = texts[i];
    el.style.opacity = "1";
    i = (i + 1) % texts.length;

    function advance() {
      el.style.opacity = "0";
      setTimeout(() => {
        el.textContent = texts[i];
        el.style.opacity = "1";
        i = (i + 1) % texts.length;
      }, FADE);
    }

    window.addEventListener("dream:tick", advance);
  });
</script>

  <!-- <script>
    document.addEventListener("DOMContentLoaded", () => {
      const rotatingTextElement = document.getElementById("rotating-text");
      const texts = [
        "start a business",
        "enter new markets",
        "save an hour every day",
        "handle more customers",
      ];
      let index = 0;

      function rotateText() {
        // Fade out
        rotatingTextElement.style.opacity = "0";

        setTimeout(() => {
          // Change text after fade out
          rotatingTextElement.textContent = texts[index];

          // Fade in
          rotatingTextElement.style.opacity = "1";

          // Move to next index, looping back to the start
          index = (index + 1) % texts.length;
        }, 200); // Adjust timing for fade-out before changing text

        // Repeat after 5 seconds
        setTimeout(rotateText, 5000);
      }

      // Start the rotation
      rotateText();
    });
  </script> -->




  <script>
    (function startSharedTicker(period = 5000) {
      if (window.__dreamTicker) return;
  
      const S = { timer: null, period, running: false, expected: 0, count: 0, booted: false };
  
      const dispatch = () => {
        S.count++;
        window.dispatchEvent(new CustomEvent("dream:tick", { detail: { count: S.count, period: S.period, ts: performance.now() } }));
      };
  
      const schedule = (delay) => { S.timer = setTimeout(tick, Math.max(0, delay)); };
  
      function tick() {
        const now = performance.now();
        if (!S.expected) S.expected = now + S.period;
  
        const behind = now - S.expected;
  
        // Overslept (tab slept) → skip backlog, fire once, then resume on-beat
        if (behind > S.period * 0.8) {
          S.expected = now + S.period;
          schedule(S.period);
          dispatch();
          return;
        }
  
        S.expected += S.period;
        schedule(S.expected - performance.now());
        dispatch();
      }
  
      function start() {
        if (S.running) return;
        S.running = true;
        S.expected = performance.now() + S.period;
        schedule(S.period);
  
        // First boot: emit one immediate tick so UI paints a value quickly.
        if (!S.booted) {
          S.booted = true;
          dispatch();
        }
      }
  
      function stop() {
        S.running = false;
        clearTimeout(S.timer);
        S.timer = null;
        S.expected = 0;
      }
  
      function onVis() {
        if (document.visibilityState === "hidden") stop();
        else start();
      }
  
      window.addEventListener("visibilitychange", onVis, { passive: true });
      window.addEventListener("pagehide", stop, { passive: true });
      window.addEventListener("pageshow", start, { passive: true });
  
      start();
  
      window.__dreamTicker = {
        start, stop,
        getCount: () => S.count,
        getPeriod: () => S.period
      };
    })();
  
    // ---- Rotating headline: derives purely from global count (no local counters) ----
    (function attachHeadline() {
      const el = document.getElementById("rotating-text");
      if (!el || el.dataset.rotatorAttached) return;
      el.dataset.rotatorAttached = "1";
  
      const texts = [
        "start a business",
        "enter new markets",
        "save an hour every day",
        "handle more customers",
        "get paid on time"
      ];
  
      const FADE = 400;
      el.style.transition = `opacity ${FADE}ms ease`;
      el.style.willChange = "opacity";
  
      const ticker = window.__dreamTicker;
      const getCount = () => (ticker?.getCount?.() ?? 1);
      const mod = (n, m) => ((n % m) + m) % m;
  
      function renderForCount(count, withFade = true) {
        const idx = mod(count - 1, texts.length);
        const next = texts[idx];
  
        if (!withFade) {
          el.textContent = next;
          el.style.opacity = "1";
          el.__last = next;
          return;
        }
        if (el.__last === next && el.style.opacity === "1") return;
  
        const onFadeOut = () => {
          el.removeEventListener("transitionend", onFadeOut);
          el.textContent = next;
          requestAnimationFrame(() => {
            el.addEventListener("transitionend", () => {}, { once: true });
            el.style.opacity = "1";
            el.__last = next;
          });
        };
  
        // Start fade-out if visible; otherwise just swap in
        if (getComputedStyle(el).opacity !== "0") {
          el.addEventListener("transitionend", onFadeOut, { once: true });
          el.style.opacity = "0";
        } else {
          el.textContent = next;
          el.style.opacity = "1";
          el.__last = next;
        }
      }
  
      // Initial snap (no fade)
      renderForCount(getCount(), false);
  
      window.addEventListener("dream:tick", (e) => renderForCount(e?.detail?.count ?? getCount() + 1, true), { passive: true });
      document.addEventListener("visibilitychange", () => {
        if (document.visibilityState === "visible") renderForCount(getCount(), false);
      }, { passive: true });
      window.addEventListener("pageshow", () => renderForCount(getCount(), false), { passive: true });
    })();
  </script>
  
  <style>
    #rotating-text {
      transition: opacity 0.4s;
      opacity: 1;
    }
  </style>
  
  <!-- === Promo reveal on view === -->
  <script type="module">
    const target = document.querySelector('.promo-human');
  
    const observer = new IntersectionObserver(
      ([entry], observer) => {
        if (entry?.isIntersecting) {
          target.classList.add('visible');
          observer.unobserve(target);
        }
      },
      { root: null, rootMargin: '0px', threshold: 0.4 }
    );
  
    if (target) observer.observe(target);
  </script>
  
  <!-- === Quote carousel (plain JS; removed TS-only syntax) === -->
  <script>
    (function () {
      const root = document.querySelector('.customer-quote .quote-body');
      if (!root) return;
    
      const track = root.querySelector('.quote-track');
      const slides = Array.from(root.querySelectorAll('.quote-slide'));
      const dotsWrap = root.querySelector('.quote-dots');
      if (!track || !slides.length || !dotsWrap) return;
    
      // Build dots
      slides.forEach((_, i) => {
        const b = document.createElement('button');
        b.type = 'button';
        b.setAttribute('aria-label', `Go to quote ${i + 1}`);
        b.addEventListener('click', () => {
          goTo(i, true);
          resetCycle();
        });
        dotsWrap.appendChild(b);
      });
      const dots = Array.from(dotsWrap.querySelectorAll('button'));
    
      let idx = 0;
      const autoMs = 6000;
      let timer = null;
      let programmaticScroll = false;
    
      function updateDots(i) {
        dots.forEach((d, k) => d.setAttribute('aria-current', k === i ? 'true' : 'false'));
      }
    
      function goTo(i, smooth = true) {
        idx = (i + slides.length) % slides.length;
        programmaticScroll = true;
        track.scrollTo({
          left: slides[idx].offsetLeft,
          behavior: smooth ? 'smooth' : 'auto',
        });
        updateDots(idx);
      }
    
      // IntersectionObserver keeps idx in sync if user drags
      const io = new IntersectionObserver(
        (entries) => {
          entries.forEach((e) => {
            if (e.isIntersecting && e.intersectionRatio > 0.6) {
              const n = slides.indexOf(e.target);
              if (n !== -1) {
                idx = n;
                updateDots(idx);
              }
            }
          });
        },
        { root: track, threshold: [0.6] }
      );
      slides.forEach((s) => io.observe(s));
    
      // Autoplay with self-scheduling timeout
      function scheduleNext() {
        clearNext();
        timer = window.setTimeout(() => {
          goTo(idx + 1, true);
          waitForScrollEnd().then(() => {
            programmaticScroll = false;
            scheduleNext();
          });
        }, autoMs);
      }
      function clearNext() {
        if (timer) clearTimeout(timer);
        timer = null;
      }
      function resetCycle() {
        clearNext();
        scheduleNext();
      }
    
      // Wait until smooth scroll finishes before scheduling next tick
      function waitForScrollEnd() {
        if ('onscrollend' in window) {
          return new Promise((resolve) => {
            const handler = () => {
              track.removeEventListener('scrollend', handler);
              resolve();
            };
            track.addEventListener('scrollend', handler, { once: true });
          });
        }
        return new Promise((resolve) => {
          let t;
          const onScroll = () => {
            if (!programmaticScroll) return;
            clearTimeout(t);
            t = window.setTimeout(() => {
              track.removeEventListener('scroll', onScroll);
              resolve();
            }, 150);
          };
          track.addEventListener('scroll', onScroll, { passive: true });
          onScroll();
        });
      }
    
      // User manual scroll: reset cycle after they stop
      let manualDebounce;
      track.addEventListener(
        'scroll',
        () => {
          if (programmaticScroll) return;
          clearNext();
          clearTimeout(manualDebounce);
          manualDebounce = window.setTimeout(() => {
            scheduleNext();
          }, 800);
        },
        { passive: true }
      );
    
      // Init
      goTo(0, false);
      programmaticScroll = false;
      scheduleNext();
    })();
  </script>
  
  
  
  
</Layout>
