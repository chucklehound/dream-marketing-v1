---
interface Props {
  onClose?: () => void;
}

const { onClose } = Astro.props;

import "../components/navigation.scss";
import HamburgerIcon from "/src/img/nav.svg?raw";
import Dreamies from '/src/img/dreamies.png';

import Logo from "../components/Logo.astro";

import Button from "../components/Button.astro";

import angledArrowDR from "/src/img/angled-arrow-down-right.svg";
---

<div class="navigation">
  <nav>
    <!-- Hamburger button for small screens -->
    <button class="hamburger" aria-label="Toggle navigation">
      <Fragment set:html={HamburgerIcon} />
      <span class="visually-hidden">Toggle navigation</span>
    </button>
    <a class="logo-nav" href="/"
      ><Logo /><span class="visually-hidden">Return home</span></a
    >
    <ul class="navbar">
      <li><a class="hero-nav" href="/your-ai-employees"><span><img src={Dreamies.src} alt="" />Your AI employees</span></a></li>
      <li><a href="/pricing">Pricing</a></li>
      <li><a href="/community">Community</a></li>
      <li><a href="/about-us">About Us</a></li>
      <li>
        <div class="mobile-login-button">
          <Button
            href="https://chat.usedream.ai"
            target="_blank"
            variant="secondary"
            label="">Log in</Button
          >
        </div>
      </li>
    </ul>
    <!-- Always visible login button -->
    <div class="main-actions">
      <Button
        href="https://chat.usedream.ai"
        target="_blank"
        variant="secondary"
        size="small"
        class="hide-on-mobile"
        label="">Log in</Button>
        <div class="mobile-demo-button">
          <Button href="/get-started" target="_blank" variant="primary" size="small" label=""
            >Get started</Button
          >
        </div>
    </div>
  </nav>
</div>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const hamburger = document.querySelector(".hamburger");
    const navLinks = document.querySelector(".navbar");
    const dropdownToggles = document.querySelectorAll(".dropdown-toggle");
    const navigation = document.querySelector(".navigation");
    const body = document.body; // Select the body element

    // Hamburger menu toggle
    hamburger.addEventListener("click", () => {
      navLinks.classList.toggle("open");
      hamburger.classList.toggle("navOpen");
    });

    // Function to check if any dropdown is open
    function updateNavigationClass() {
      const anyDropdownOpen = Array.from(dropdownToggles).some((toggle) =>
        toggle.classList.contains("active")
      );
      if (anyDropdownOpen) {
        navigation.classList.add("dropdown-open");
        body.classList.add("dropdown-open"); // Add class to body
      } else {
        navigation.classList.remove("dropdown-open");
        body.classList.remove("dropdown-open"); // Remove class from body
      }
    }

    // Function to close all dropdowns
    function closeAllDropdowns(excludeToggle = null) {
      dropdownToggles.forEach((dropdownToggle) => {
        if (dropdownToggle !== excludeToggle) {
          // Exclude the currently clicked toggle
          const dropdownMenu = dropdownToggle.nextElementSibling;
          dropdownMenu.classList.remove("show");
          dropdownToggle.classList.remove("active");
        }
      });
    }

    // Apply click behavior for dropdowns
    dropdownToggles.forEach((dropdownToggle) => {
      const dropdownMenu = dropdownToggle.nextElementSibling;

      // Toggle dropdown on click
      dropdownToggle.addEventListener("click", (e) => {
        e.preventDefault();

        // If the clicked dropdown is already open, close it
        if (dropdownToggle.classList.contains("active")) {
          dropdownMenu.classList.remove("show");
          dropdownToggle.classList.remove("active");
        } else {
          // Close all other dropdowns, then open the clicked one
          closeAllDropdowns(dropdownToggle);
          dropdownMenu.classList.add("show");
          dropdownToggle.classList.add("active");
        }

        updateNavigationClass(); // Update the class when the dropdown is toggled
      });
    });

    // Close all dropdowns when clicking outside
    document.addEventListener("click", (e) => {
      const targetElement = e.target as Element;
      const anyDropdownMenuOpen = Array.from(dropdownToggles).some((toggle) => {
        const dropdownMenu = toggle.nextElementSibling;
        return (
          dropdownMenu.contains(targetElement) || toggle.contains(targetElement)
        );
      });

      if (!anyDropdownMenuOpen) {
        closeAllDropdowns(); // Close all dropdowns if clicked outside
        updateNavigationClass(); // Update the class when all dropdowns are closed
      }
    });
  });
</script>
