---
import Modal from "./Modal.astro"
---
<Modal id="mailing-list-modal" closeLabel="Close">
    <h2 slot="title">Be the first to hire a Dream Pro</h2>
    <p>We're onboarding new Pros, get an instant notification when they're ready to hire.</p>
  
    <div class="modal-form">
      <!-- Form view -->
      <form id="contactForm" class="webform" novalidate>
        <!-- honeypot -->
        <input type="text" name="address" tabindex="-1" autocomplete="off" hidden />
  
        <label>
          Name
          <input type="text" name="name" autocomplete="name" required />
        </label>
  
        <label>
          Email
          <input type="email" name="email" autocomplete="email" required />
        </label>
  
        <label>
          Company name
          <input type="text" name="company" autocomplete="organization" />
        </label>
  
        <label>
          Phone number
          <input type="tel" name="phone" autocomplete="tel" inputmode="tel" aria-describedby="phoneHelp" />
        </label>
        <p id="phoneHelp" class="visually-hidden">Include country code if outside the UK.</p>
  
        <fieldset class="dreamie-radio-group">
          <legend>Which Pros are you most excited by? <span class="muted">(pick all that apply)</span></legend>
        
          <div class="radio-option">
            <input type="checkbox" id="personal-assistant" name="dreamie" value="Personal Assistant" />
            <label for="personal-assistant">Personal Pro</label>
          </div>
          <div class="radio-option">
            <input type="checkbox" id="sales" name="dreamie" value="Head of Sales" />
            <label for="sales">Sales Pro</label>
          </div>
          <div class="radio-option">
            <input type="checkbox" id="finance" name="dreamie" value="Finance Manager" />
            <label for="finance">Finance Pro</label>
          </div>
          <div class="radio-option">
            <input type="checkbox" id="marketing" name="dreamie" value="Head of Marketing" />
            <label for="marketing">Marketing Pro</label>
          </div>
          <div class="radio-option">
            <input type="checkbox" id="cs" name="dreamie" value="Customer Service Manager" />
            <label for="cs">Support Pro</label>
          </div>
          <div class="radio-option">
            <input type="checkbox" id="other" name="dreamie" value="Other" />
            <label for="other">Other</label>
          </div>
        </fieldset>
        
  
        <button type="submit" class="button secondary" id="submitBtn" aria-live="polite">
          Get updates
        </button>
  
        <p id="formStatus" class="form-status" role="status" aria-live="polite"></p>
      </form>
  
      <!-- Success view (hidden until success) -->
      <div id="successView" class="success-view" hidden>
        <h4 id="successHeading">Thanks — you're on the list</h4>
        <p>While you’re here, follow us on LinkedIn</p>
        <ul class="success-links">
          <li><a href="https://www.linkedin.com/company/dream-ai-employees">Dream on LinkedIn</a></li>
        </ul>
  
        <div class="success-actions">
          <button type="button" class="button" data-close-modal>Close</button>
        </div>
      </div>
    </div>
  
    <script is:inline>
      (function () {
        // Prevent duplicate bindings if this script is included twice
        if (window.__hsMailingInit) return;
        window.__hsMailingInit = true;
    
        const PORTAL_ID = "49000459";
        const FORM_GUID = "4c792f29-f1da-4d96-9151-126ad0262902";
        const HS_URL = `https://api.hsforms.com/submissions/v3/integration/submit/${PORTAL_ID}/${FORM_GUID}`;
    
        const modal       = document.getElementById('mailing-list-modal');
        const form        = modal?.querySelector('#contactForm');
        const btn         = modal?.querySelector('#submitBtn');
        const statusElm   = modal?.querySelector('#formStatus');
        const successView = modal?.querySelector('#successView');
    
        if (!form) return;
        if (form.dataset.bound === '1') return;
        form.dataset.bound = '1';
    
        const getCookie = (name) =>
          document.cookie.split('; ').find(c => c.startsWith(name + '='))?.split('=')[1];
    
        const setLoading = (loading) => {
          if (!btn) return;
          btn.disabled = loading;
          btn.dataset.originalLabel ??= btn.textContent;
          btn.textContent = loading ? 'Sending…' : btn.dataset.originalLabel;
        };
    
        const splitName = (full) => {
          const s = (full || '').trim().replace(/\s+/g, ' ');
          if (!s) return { first: '', last: '' };
          const parts = s.split(' ');
          if (parts.length === 1) return { first: parts[0], last: '' };
          return { first: parts.slice(0, -1).join(' '), last: parts[parts.length - 1] };
        };
    
        // Map checkbox label/value -> HubSpot CRM option value (from your HS form)
        const OPTION_MAP = {
          'Personal Pro':        'L6cGUyY3rxjbrVhObJdhj',
          'Sales Pro':             'heWA2aiKPXyI4gZmUDUmF',   // note: I4
          'Marketing Pro':         'oqS6sVZIgJPH0sSj37WLH',
          'Support Pro': 'Ky7KhJjSBxEwocMYR8UOf',
          'Finance Pro':           'zToAvy_nDQn8MCqsJHTtv',
          'Something else':            'gRPuHuaxPur2_WQovppri'
        };
    
        form.addEventListener('submit', async (e) => {
          e.preventDefault();
          if (statusElm) statusElm.textContent = '';
          // honeypot
          if (form.address?.value?.trim()) return;
    
          setLoading(true);
    
          try {
            const fd = new FormData(form);
            const fullName = (fd.get('name')  || '').toString().trim();
            const email    = (fd.get('email') || '').toString().trim();
            const company  = (fd.get('company') || '').toString().trim();
            const phone    = (fd.get('phone')   || '').toString().trim();
    
            // Collect all checked checkboxes named "dreamie" and map to CRM values
            const selected = Array.from(form.querySelectorAll('input[name="dreamie"]:checked'))
              .map(i => OPTION_MAP[i.value])
              .filter(Boolean);
    
            if (selected.length === 0) {
              if (statusElm) statusElm.textContent = 'Please pick at least one employee.';
              setLoading(false);
              return;
            }
    
            // HubSpot expects semicolon-separated internal option values
            const whichEmployeesValue = selected.join(';');
    
            const { first, last } = splitName(fullName);
    
            const fields = [
              { name: 'email', value: email },
              { name: 'firstname', value: first },
              { name: 'lastname',  value: last },
              { name: 'which_employees_', value: whichEmployeesValue },
              { name: 'company', value: company },
              { name: 'phone',   value: phone },
            ].filter(f => f.value !== '');
    
            const context = {
              hutk: getCookie('hubspotutk') || undefined,
              pageUri: window.location.href,
              pageName: document.title
            };
    
            const res = await fetch(HS_URL, {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ fields, context })
            });
    
            if (!res.ok) throw new Error('Bad response');
    
            form.hidden = true;
            if (successView) successView.hidden = false;
    
            const heading = successView?.querySelector('#successHeading');
            if (heading) {
              heading.setAttribute('tabindex', '-1');
              heading.focus({ preventScroll: true });
              setTimeout(() => heading.removeAttribute('tabindex'), 100);
            }
            form.reset();
          } catch {
            if (statusElm) statusElm.textContent = 'Something went wrong. Please try again.';
          } finally {
            setLoading(false);
          }
        });
      })();
    </script>
  </Modal>